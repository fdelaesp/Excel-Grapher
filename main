import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class GraphGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Excel Data Grapher")
        self.geometry("1200x900")  # Larger window size for better visibility

        # Label for file path
        self.file_path_label = tk.Label(self, text="Select an Excel File", font=("Helvetica", 14))
        self.file_path_label.pack(pady=10)

        # Button to load file
        self.load_button = tk.Button(self, text="Load Excel File", command=self.load_file, font=("Helvetica", 12))
        self.load_button.pack(pady=10)

        # Dropdown for sheets
        self.sheet_label = tk.Label(self, text="Choose a Sheet", font=("Helvetica", 12))
        self.sheet_label.pack(pady=5)
        self.sheet_var = tk.StringVar(self)
        self.sheet_menu = tk.OptionMenu(self, self.sheet_var, "")
        self.sheet_menu.pack(pady=5)

        # Dropdown for X-axis
        self.x_label = tk.Label(self, text="Choose X-axis column", font=("Helvetica", 12))
        self.x_label.pack(pady=5)
        self.x_var = tk.StringVar(self)
        self.x_menu = tk.OptionMenu(self, self.x_var, "")
        self.x_menu.pack(pady=5)

        # Dropdown for Y-axis
        self.y_label = tk.Label(self, text="Choose Y-axis column", font=("Helvetica", 12))
        self.y_label.pack(pady=5)
        self.y_var = tk.StringVar(self)
        self.y_menu = tk.OptionMenu(self, self.y_var, "")
        self.y_menu.pack(pady=5)

        # Categorical column selection
        self.category_column_label = tk.Label(self, text="Choose a column with categorical data (Optional)", font=("Helvetica", 12))
        self.category_column_label.pack(pady=5)
        self.category_column_var = tk.StringVar(self)
        self.category_column_menu = tk.OptionMenu(self, self.category_column_var, "")
        self.category_column_menu.pack(pady=5)

        # Categorical values selection
        self.category_values_label = tk.Label(self, text="Choose values from selected column (Optional)", font=("Helvetica", 12))
        self.category_values_label.pack(pady=5)
        self.category_values_listbox = tk.Listbox(self, selectmode="multiple", height=5)
        self.category_values_listbox.pack(pady=5)

        # Button to plot graph
        self.plot_button = tk.Button(self, text="Plot Graph", command=self.plot_graph, font=("Helvetica", 14))
        self.plot_button.pack(pady=20)

        # Variable to store data
        self.df = None

    def load_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx *.xls")])
        if file_path:
            self.file_path_label.config(text=file_path)
            try:
                self.excel_file = pd.ExcelFile(file_path, engine='openpyxl')
                self.sheet_var.set('')
                self.sheet_menu["menu"].delete(0, "end")

                for sheet in self.excel_file.sheet_names:
                    self.sheet_menu["menu"].add_command(label=sheet, command=tk._setit(self.sheet_var, sheet))

                self.sheet_var.trace("w", self.load_sheet_columns)

            except Exception as e:
                messagebox.showerror("Error", f"Failed to load file: {e}")

    def load_sheet_columns(self, *args):
        sheet_name = self.sheet_var.get()
        if sheet_name:
            try:
                self.df = self.excel_file.parse(sheet_name)
                columns = self.df.columns

                self.x_var.set('')
                self.y_var.set('')
                self.category_column_var.set('')
                self.category_values_listbox.delete(0, 'end')

                self.x_menu["menu"].delete(0, "end")
                self.y_menu["menu"].delete(0, "end")
                self.category_column_menu["menu"].delete(0, "end")

                for col in columns:
                    self.x_menu["menu"].add_command(label=col, command=tk._setit(self.x_var, col))
                    self.y_menu["menu"].add_command(label=col, command=tk._setit(self.y_var, col))
                    self.category_column_menu["menu"].add_command(label=col, command=tk._setit(self.category_column_var, col))

                self.category_column_var.trace("w", self.load_category_values)

            except Exception as e:
                messagebox.showerror("Error", f"Failed to load sheet: {e}")

    def load_category_values(self, *args):
        category_column = self.category_column_var.get()
        if category_column:
            try:
                unique_values = self.df[category_column].unique()
                self.category_values_listbox.delete(0, 'end')

                for value in unique_values:
                    self.category_values_listbox.insert("end", value)

            except Exception as e:
                messagebox.showerror("Error", f"Failed to load unique values: {e}")

    def apply_categorical_filter(self, df):
        category_column = self.category_column_var.get()
        selected_values = [self.category_values_listbox.get(i) for i in self.category_values_listbox.curselection()]

        if category_column and selected_values:
            try:
                filtered_df = df[df[category_column].isin(selected_values)]
                return filtered_df
            except Exception as e:
                messagebox.showerror("Error", f"Failed to filter data: {e}")
                return df
        return df

    def plot_graph(self):
        x_column = self.x_var.get()
        y_column = self.y_var.get()

        if self.df is None or not x_column or not y_column:
            messagebox.showerror("Error", "Please select a file, sheet, X-axis, and Y-axis columns.")
            return

        filtered_df = self.apply_categorical_filter(self.df)

        if filtered_df.empty:
            messagebox.showerror("Error", "No data matches the filter criteria.")
            return

        fig, ax = plt.subplots(figsize=(16, 10))  # Larger figure size

        # Scatter plot with enhancements
        scatter = ax.scatter(filtered_df[x_column], filtered_df[y_column],
                            label=y_column, color='b', s=60, alpha=0.7, edgecolors='w', linewidth=0.5)

        ax.set_xlabel(x_column, fontsize=14)
        ax.set_ylabel(y_column, fontsize=14)
        ax.set_title(f"Dot Graph of {y_column} vs {x_column}", fontsize=16)
        ax.legend()
        ax.grid(True, linestyle='--', alpha=0.6)

        # Embed plot in Tkinter window
        canvas = FigureCanvasTkAgg(fig, master=self)
        canvas.draw()
        canvas.get_tk_widget().pack(pady=10)

if __name__ == "__main__":
    app = GraphGUI()
    app.mainloop()
